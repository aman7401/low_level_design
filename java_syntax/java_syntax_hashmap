A HashMap in Java is part of the Java Collections Framework, 
allowing you to store key-value pairs. 
This data structure provides a way to map keys to values, 
with each key being unique within the 
HashMap. It's widely used because it offers constant-time complexity for basic 
operations like put, get, and remove, given a good hash function and proper 
handling of collisions.

Here's a comprehensive guide to HashMap, including key operations, 
usage examples, and common functions:

Basic Operations
Creating a HashMap:
import java.util.HashMap;

HashMap<String, Integer> map = new HashMap<>();  // Creating an empty HashMap
HashMap<String, Integer> mapWithValues = new HashMap<>(Map.of("apple", 1, "banana", 2));  // HashMap with initial values

Adding Key-Value Pairs:
map.put("apple", 1);  // Adds a key-value pair
map.put("banana", 2);  // Adds another key-value pair

Retrieving Values by Key:
int appleCount = map.get("apple");  // Retrieves the value associated with "apple"
Integer unknown = map.get("unknown");  // Returns null if the key doesn't exist

Checking if a Key or Value Exists:
boolean hasApple = map.containsKey("apple");  // Checks if "apple" is a key in the map
boolean hasThree = map.containsValue(3);  // Checks if 3 is a value in the map

Informational Methods
Getting the Size and Checking if Empty:
int size = map.size();  // Gets the number of key-value pairs
boolean isEmpty = map.isEmpty();  // Checks if the map is empty

Removing Key-Value Pairs:
map.remove("banana");  // Removes the key-value pair with the specified key
Advanced Operations and Use Cases

Looping through a HashMap:
// Using keySet() to iterate through keys
for (String key : map.keySet()) {
  System.out.println("Key: " + key);
}

// Using values() to iterate through values
for (Integer value : map.values()) {
  System.out.println("Value: " + value);
}

// Using entrySet() to iterate through key-value pairs
for (Map.Entry<String, Integer> entry : map.entrySet()) {
  System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
}

Replacing Values in the Map:
map.replace("apple", 10);  // Replaces the value for "apple" with 10

Merging Two HashMaps:
HashMap<String, Integer> anotherMap = new HashMap<>(Map.of("orange", 3, "grape", 4));
map.putAll(anotherMap);  // Adds all key-value pairs from anotherMap to map

Clearing the Map:
map.clear();  // Removes all key-value pairs from the map


HashMap Characteristics

Null Keys and Values: A HashMap can contain null keys and values. 
Only one null key is allowed, but multiple null values are permitted.

Hash Collisions: The HashMap implementation handles collisions by using a form of chaining, 
typically with linked lists or balanced trees.

Ordering: HashMap does not guarantee any specific order of elements. 
If you need a specific order, consider using LinkedHashMap for insertion order or 
TreeMap for sorted order.

Common Use Cases for HashMap
Storing and Retrieving Data: HashMap is ideal for scenarios where you need fast lookup, 
like caching, dictionaries, or mapping relationships.
Counting Occurrences: It can be used to count the occurrences of elements in a collection.
Implementing Data Structures: HashMap is often used to build other data structures 
like sets, graphs, or lookup tables.